window.addEventListener('load', async () => {
  const response = { "lastPushedRepos": { "repositories": { "edges": [ { "node": { "name": "waai", "url": "https://github.com/Zemke/waai", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDU=", "color": "#3572A5", "name": "Python" }, "size": 33900 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxMzk=", "color": "#89e051", "name": "Shell" }, "size": 2389 } ] } } }, { "node": { "name": "ml", "url": "https://github.com/Zemke/ml", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2U0ODk=", "color": "#DA5B0B", "name": "Jupyter Notebook" }, "size": 636366 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDU=", "color": "#3572A5", "name": "Python" }, "size": 6623 } ] } } }, { "node": { "name": "waaas", "url": "https://github.com/Zemke/waaas", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDU=", "color": "#3572A5", "name": "Python" }, "size": 15576 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxMzk=", "color": "#89e051", "name": "Shell" }, "size": 3345 } ] } } }, { "node": { "name": "chess-ai", "url": "https://github.com/Zemke/chess-ai", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDU=", "color": "#3572A5", "name": "Python" }, "size": 5059 } ] } } }, { "node": { "name": "javalin-chess", "url": "https://github.com/Zemke/javalin-chess", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UyNzI=", "color": "#A97BFF", "name": "Kotlin" }, "size": 78356 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0ODM=", "color": "#41b883", "name": "Vue" }, "size": 12586 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 414 } ] } } }, { "node": { "name": "dotfiles", "url": "https://github.com/Zemke/dotfiles", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2U1Njk=", "color": "#199f4b", "name": "Vim script" }, "size": 46355 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxMzk=", "color": "#89e051", "name": "Shell" }, "size": 1971 } ] } } }, { "node": { "name": "zemke.github.io", "url": "https://github.com/Zemke/zemke.github.io", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2U2MDU=", "color": "#c6538c", "name": "SCSS" }, "size": 21523 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 20283 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 5690 }, { "node": { "id": "MDg6TGFuZ3VhZ2UzMDg=", "color": "#563d7c", "name": "CSS" }, "size": 4166 } ] } } }, { "node": { "name": "algorithms", "url": "https://github.com/Zemke/algorithms", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDU=", "color": "#3572A5", "name": "Python" }, "size": 11548 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNTE=", "color": "#4F5D95", "name": "PHP" }, "size": 6216 } ] } } }, { "node": { "name": "instant-smart-quotes", "url": "https://github.com/Zemke/instant-smart-quotes", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 24262 }, { "node": { "id": "MDg6TGFuZ3VhZ2UzMDg=", "color": "#563d7c", "name": "CSS" }, "size": 499 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 374 } ] } } }, { "node": { "name": "just", "url": "https://github.com/Zemke/just", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 106758 }, { "node": { "id": "MDg6TGFuZ3VhZ2UzMDg=", "color": "#563d7c", "name": "CSS" }, "size": 20572 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 1821 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxMzk=", "color": "#89e051", "name": "Shell" }, "size": 861 } ] } } }, { "node": { "name": "euler100", "url": "https://github.com/Zemke/euler100", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDU=", "color": "#3572A5", "name": "Python" }, "size": 32629 } ] } } }, { "node": { "name": "wa-docker", "url": "https://github.com/Zemke/wa-docker", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2U1MzU=", "color": "#384d54", "name": "Dockerfile" }, "size": 2538 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxMzk=", "color": "#89e051", "name": "Shell" }, "size": 199 } ] } } }, { "node": { "name": "tippspiel2", "url": "https://github.com/Zemke/tippspiel2", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UyNzI=", "color": "#A97BFF", "name": "Kotlin" }, "size": 160011 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 49171 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTk=", "color": "#f7931e", "name": "Handlebars" }, "size": 26804 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNTg=", "color": "#b07219", "name": "Java" }, "size": 3479 } ] } } }, { "node": { "name": "react-native-peerjs", "url": "https://github.com/Zemke/react-native-peerjs", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxMzk=", "color": "#89e051", "name": "Shell" }, "size": 371 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 105 } ] } } }, { "node": { "name": "gpx-splitter", "url": "https://github.com/Zemke/gpx-splitter", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 4246 } ] } } }, { "node": { "name": "worms-league", "url": "https://github.com/Zemke/worms-league", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 23120 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxODU=", "color": "#198CE7", "name": "R" }, "size": 18563 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 7216 }, { "node": { "id": "MDg6TGFuZ3VhZ2UzMDg=", "color": "#563d7c", "name": "CSS" }, "size": 3348 } ] } } }, { "node": { "name": "notes", "url": "https://github.com/Zemke/notes", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 6322 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 3984 } ] } } }, { "node": { "name": "just-native", "url": "https://github.com/Zemke/just-native", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNTg=", "color": "#b07219", "name": "Java" }, "size": 9431 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDE=", "color": "#701516", "name": "Ruby" }, "size": 5246 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNTY=", "color": "#438eff", "name": "Objective-C" }, "size": 4356 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 4248 } ] } } }, { "node": { "name": "mars", "url": "https://github.com/Zemke/mars", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2U2MDU=", "color": "#c6538c", "name": "SCSS" }, "size": 11680 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 9192 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 2524 } ] } } }, { "node": { "name": "mojomat6", "url": "https://github.com/Zemke/mojomat6", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNTg=", "color": "#b07219", "name": "Java" }, "size": 6505 } ] } } }, { "node": { "name": "ffs", "url": "https://github.com/Zemke/ffs", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNTE=", "color": "#4F5D95", "name": "PHP" }, "size": 12418395 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 1675737 }, { "node": { "id": "MDg6TGFuZ3VhZ2UzMDg=", "color": "#563d7c", "name": "CSS" }, "size": 717234 }, { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 457117 } ] } } }, { "node": { "name": "javafx-snow", "url": "https://github.com/Zemke/javafx-snow", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNTg=", "color": "#b07219", "name": "Java" }, "size": 5031 } ] } } }, { "node": { "name": "modifiedshop-docker", "url": "https://github.com/Zemke/modifiedshop-docker", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNTE=", "color": "#4F5D95", "name": "PHP" }, "size": 371 }, { "node": { "id": "MDg6TGFuZ3VhZ2U1MzU=", "color": "#384d54", "name": "Dockerfile" }, "size": 362 } ] } } }, { "node": { "name": "busybee", "url": "https://github.com/Zemke/busybee", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 3562 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 343 }, { "node": { "id": "MDg6TGFuZ3VhZ2UzMDg=", "color": "#563d7c", "name": "CSS" }, "size": 320 } ] } } }, { "node": { "name": "khttp", "url": "https://github.com/Zemke/khttp", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UyNzI=", "color": "#A97BFF", "name": "Kotlin" }, "size": 158404 } ] } } }, { "node": { "name": "http-mock", "url": "https://github.com/Zemke/http-mock", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 5655 } ] } } }, { "node": { "name": "ddns-endpoint", "url": "https://github.com/Zemke/ddns-endpoint", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDU=", "color": "#3572A5", "name": "Python" }, "size": 884 } ] } } }, { "node": { "name": "convert-links", "url": "https://github.com/Zemke/convert-links", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 4404 } ] } } }, { "node": { "name": "ipfs-chat", "url": "https://github.com/Zemke/ipfs-chat", "languages": { "edges": [ { "node": { "id": "MDg6TGFuZ3VhZ2UxNDA=", "color": "#f1e05a", "name": "JavaScript" }, "size": 10362 }, { "node": { "id": "MDg6TGFuZ3VhZ2UzMDg=", "color": "#563d7c", "name": "CSS" }, "size": 1808 }, { "node": { "id": "MDg6TGFuZ3VhZ2U0MTc=", "color": "#e34c26", "name": "HTML" }, "size": 1708 } ] } } } ] } }, "pinnedRepos": { "pinnedItems": { "nodes": [ { "id": "MDEwOlJlcG9zaXRvcnkyNTEzNzc4NTg=", "name": "waaas", "description": "WAaaS — Worms Armageddon as a Service", "url": "https://github.com/Zemke/waaas", "homepageUrl": "https://waaas.zemke.io/", "object": { "text": "# Worms Armageddon as a Service\n\nWAaaS is an API to [zemke/docker-wa](https://hub.docker.com/r/zemke/docker-wa) returning data from replay files in JSON format.\n\n## Visualization example\n\nScreen shot from https://cwtsite.com/games/1602\n\n![Data visualization example](https://user-images.githubusercontent.com/3391981/81668501-0e317d00-9445-11ea-9206-954444ffd97b.png)\n" } }, { "id": "MDEwOlJlcG9zaXRvcnk3ODU0OTQw", "name": "cwt", "description": "Crespo’s Worms Tournament (CWT) is the most prestigious tournament of Team17’s strategy game title Worms Armageddon held annually since 2002.", "url": "https://github.com/cwt-wa/cwt", "homepageUrl": "https://cwtsite.com/", "object": { "text": "![CI](https://github.com/cwt-wa/cwt/workflows/CI/badge.svg)\n![release](https://img.shields.io/github/v/release/cwt-wa/cwt.svg)\n\n# Crespo’s Worms Tournament\n\nCrespo’s Worms Tournament (CWT) is the most prestigious tournament of Team17’s strategy game title Worms Armageddon held annually since 2002.\n\n[Wiki](http://worms2d.info/Crespo%27s_Worms_Tournament)\n" } }, { "id": "MDEwOlJlcG9zaXRvcnk2NDE2NjQ5Mw==", "name": "instant-smart-quotes", "description": "Chrome’s most popular extension to replace typewriter quotes, apostrophes, ellipses and dashes with their typographically correct counterparts as you type.", "url": "https://github.com/Zemke/instant-smart-quotes", "homepageUrl": "https://chrome.google.com/webstore/detail/instant-smart-quotes/dddflkfjemblhfmjdlmmilapbkdaabcj", "object": { "text": "# Instant Smart Quotes\n\nReplace typewriter quotes, apostrophes, ellipses and dashes with their typographically correct counterparts as you type.\nInstant Smart Quotes is the last extension you will need to write beautiful typographically correct texts.\n\n- Support for over 50 languages\n- Quickly enable and disable the instant replacements from the toolbar\n- Quickly change the language from the toolbar\n- All settings are saved per page and synched across all of your devices\n- Text in `backticks` will be ignored in favor of Markdown\n\nDepending on which language you have set, the following chars will be replaced for language-specific replacements (comma-separated):\n', \", >>, <<\n\nChars that will be replaced for no matter which language are the following (comma-separated):\n', --, ---, ...\n\nThis website is a nice manual for English punctuation guidelines:\nhttp://www.thepunctuationguide.com/\n\nSources of which quotes to be used for which language:\nhttps://en.wikipedia.org/wiki/Quotation_mark#Summary_table\nhttp://www.witch.westfalen.de/csstest/quotes/quotes.html\n\n`\"Don't be dumb\"`, “you’re using Instant Smart Quotes”. ✍️\n\n![Instant Smart Quotes preview](https://user-images.githubusercontent.com/3391981/81667198-43d56680-9443-11ea-99db-0effcc5cca08.gif)\n\n" } }, { "id": "MDEwOlJlcG9zaXRvcnkyMzA1MzY5MzI=", "name": "just", "description": "Richly featured Instant Messenger with focus on just chatting.", "url": "https://github.com/Zemke/just", "homepageUrl": "https://just.zemke.io", "object": { "text": "# Just\n\nRichly featured Instant Messenger with focus on just chatting.\n\nThere’s no registration, no syncing with your address book or sharing your phone number. You’re anonymously identified by your personal unique Just code that you share only with the people you want to contact with.\n\nPeer-to-peer video and voice calls, GIF sharing, image sharing, camera support, advanced link sharing, share from other Apps (on Android), location sharing, message reactions (tapbacks), Markdown inline and block code formatting, large emoji, Push notifications (on Android and Desktop) and much more.\n\n<img src=\"https://user-images.githubusercontent.com/3391981/148099431-d174201d-5d31-4d06-a6ba-eab417d9ed9f.png\" width=\"479\" alt=\"just\">\n" } }, { "id": "MDEwOlJlcG9zaXRvcnkxMTY0OTA5NjA=", "name": "tippspiel2", "description": "Multitenant betting game being initially developed for the World Cup 2018 in Russia.", "url": "https://github.com/Zemke/tippspiel2", "homepageUrl": "", "object": { "text": "# Tippspiel2\n\nThe epic successor of [Zemke/tippspiel](https://github.com/Zemke/tippspiel).\n\n## Run\n\n```sh\nmvn clean install && mvn spring-boot:run -pl tippspiel2-spring\n```\n\n[http://localhost:8080/](http://localhost:8080/)\n\n## Technologies\n\n* Spring Boot\n* Kotlin\n* Ember\n* ES6\n* PostgreSQL\n* Bulma\n\n## Features\n\n* Standings\n* Place bets\n* See bets by user\n* See bets by game\n* football-data.org API\n* Bet on champion\n* Simultaneous betting communities\n* ~~Simultaneous competitions~~ \n\n## Impressions\n\n> ![admin](https://user-images.githubusercontent.com/3391981/81667518-a6c6fd80-9443-11ea-9a56-12316b0285d5.png)\n\n> ![bets](https://user-images.githubusercontent.com/3391981/81667520-a75f9400-9443-11ea-8331-a4071f15a1b8.png)\n\n> ![landscape](https://user-images.githubusercontent.com/3391981/81667521-a7f82a80-9443-11ea-9a81-2e23846cbb2e.png)\n\n> ![portrait](https://user-images.githubusercontent.com/3391981/81667524-a7f82a80-9443-11ea-917a-da0ad578dc87.png)\n" } }, { "id": "MDEwOlJlcG9zaXRvcnkzMTQ2NzY1NA==", "name": "starter-laravel-angular", "description": "Laravel and AngularJS Starter Application Boilerplate featuring Laravel 5.3 and AngularJS 1.5.8", "url": "https://github.com/Zemke/starter-laravel-angular", "homepageUrl": "https://starter-laravel-angular.herokuapp.com", "object": { "text": "💁 *Zemke/starter-laravel-angular has been upgraded to AngularJS 1.5.8.*\n\n💁 *Zemke/starter-laravel-angular has been upgraded to Laravel 5.3. You can pull the changes and run* `rm composer.lock && composer install --prefer-dist --no-scripts` *to merge the upgrade.*\n\n# Laravel and AngularJS Starter Application\n\nThis is a repo for a starter application for a Single Page Application featuring the modern Laravel PHP framework and Google’s acclaimed front-end framework AngularJS. Just download and install and you have a good foundation for building any application.\n\n## Features!\n\n- Single Page Application\n  - HTML5 mode URLs\n  - Optimized Laravel and AngularJS routes\n    - You kind of don’t need to care about routes, they work automatically as you add new views. Still allows for flexibility if you plan any special routes.\n- Authentication!\n  - Flexible, extensible, clean\n  - Token-based ([tymondesigns/jwt-auth](https://github.com/tymondesigns/jwt-auth))\n  - Persistent local storage\n- Laravel Elixir readily configured\n  - Versioning of CSS and JS files (cache busting)\n  - CSS and JS files will be included automatically\n- A whole ready CRUD architecture\n- Comes with Bootstrap and AngularJS configured to work together at their best\n- And more... have a try!\n\n## Installation\n```\ngit clone https://github.com/Zemke/starter-laravel-angular.git\n```\n```\ncomposer install --prefer-dist\n```\n```\nnpm install\n```\n\n### Database setup\n\nEdit `.env.example` according to your environment and save as `.env`.\nAn application key can be generates with the command `php artisan key:generate`.\n\nRun these commands to create the tables within the database you have already created.\n\n```\nphp artisan migrate:install\n```\n```\nphp artisan migrate:refresh\n```\n\nIf you get an error like a `PDOException` try editing your `.env` file and change `DB_HOST=localhost` to `DB_HOST=127.0.0.1`. If that doesn’t work, file an issue on GitHub, I will be glad to help.\nSource: http://stackoverflow.com/a/20733001\n\n## Run\n\nTo provide the JS and CSS files and to keep track of changes to these files:\n```\ngulp && gulp watch\n```\n\nTo start the PHP built-in server:\n```\nphp -S localhost:8080 -t public/\n```\n\nNow you can browse the site  [http://localhost:8080](http://localhost:8080). 🙌\n\n## Requirements\n\n- PHP >= 5.4\n- Composer\n- Gulp\n- NPM\n- MySQL\n\n## Heroku deployment\n\n### Unignore some files\n\nYou should remove `.env` and `composer.lock` from `.gitignore`.\n\n#### .env\n\nSet up your `.env` file like described in “Database setup” above.\n\n### Heroku buildpacks\n\nYou will need to add custom buildpacks for Heroku. Create `.buildpacks` and paste:\n\n```\nhttps://github.com/heroku/heroku-buildpack-php\nhttps://github.com/heroku/heroku-buildpack-nodejs\n```\n\n### Procfile\n\n```\nweb: vendor/bin/heroku-php-apache2 public/\n```\n\n### NPM config\n\nYour `package.json` should be changed to this:\n\n```json\n{\n    \"private\": true,\n    \"devDependencies\": {\n        \"gulp\": \"^3.8.8\"\n    },\n    \"dependencies\": {\n        \"laravel-elixir\": \"^3.0.0\",\n        \"gulp\": \"^3.8.8\"\n    },\n    \"scripts\": {\n        \"postinstall\": \"gulp\"\n    }\n}\n```\n\nThe `scripts` `postinstall` part is the important here, this will generate the resources like JS and CSS files.\n\nHave fun! Any feedback is welcome. Use [Issues](https://github.com/Zemke/starter-laravel-angular/issues) or [Twitter](https://twitter.com/FlorianZemke). My Twitter handle is @FlorianZemke. I’m looking forward to talk to you.\n\n![Laravel](https://cloud.githubusercontent.com/assets/3391981/6683259/2e914726-cc84-11e4-856c-bb26bda733a0.png)\n![AngularJS](https://cloud.githubusercontent.com/assets/3391981/6683229/9e0ea694-cc83-11e4-9b2e-59524dafd069.jpg)\n" } }, { "id": "MDEwOlJlcG9zaXRvcnkyNjg4OTc0NTE=", "name": "ml", "description": "Machine Learning learning", "url": "https://github.com/Zemke/ml", "homepageUrl": "", "object": { "text": "# Neural Networks in Machine Learning\n\nNeural Networks are made of layers of neurons. Most importantly they have weighted connections and each neuron also has a bias. It is these weights and biases that when appropriately tweaked they enable the Neural Network to learn.\n\n## Biology\n\nBiology | Artificial NN\n--- | ---\nNeuronal Dendrites | ANN Input\nThickness of Dendrite | Weight of connection (think graphs)\nAxon Terminal | ANN Output\n\nFrom dendrites through the axon out the axon terminals.\n\n## Forward Pass\n\nInputs are passed forward throught the NN. The first layer is the input layer representing the inputs (also called features). On the other end they come out the output layer as labels. In between lay the hidden layers. This is mostly done in batches of inputs to reduce the load of operations. \\\nIn the end this is just basic Algebra: matrix multiplications after each layer including the weight and input matrices.\n\n### Activation function\n\nEach neuron's output also goes through an activation function. Just like in biology a neuron is only activated when the signal (output here) is strong enough.\n\nA popular activation function is ReLU which is as easy as `f(x) = max(0, x)`.\n\n### Loss function\n\nAfter the inputs have been forward passed through the NN the output layer's neurons values are evaluated by a loss function.\n\nThe loss function compares the NN output with the expected results (also called labels) and the loss for each neuron is greater the greater the difference to the result is. Therefore the goal of the NN is to reduce loss which is done by tweaking weights and biases of the neurons and its connections.\n\n## Backpropagation\n\nThe loss is groundwork for determining how the weights need to be tweaked. Remember learning is all about changing the weights of the NN.\n\nDifferentiation is the Calculus that helps us getting to know how to tweak the weights with the goal to reduce loss.\n\n# Differential Calculus\n\nRate of change with respect to another change.\n\n## Multiplication Rule\n\nMove factor outside the derivative.\n\n```\nf=(fg) -> fg'+f'g\nf=3; g=x^3\nf=(3x^3) -> 3*3x^2+x'(3)*x^3\nf=(3x^3) -> 3*3*1^2+0*x^3\nf=(3x^3) -> 9^2\n```\n\n## Sum Rule\n\nThe derivative of a sum is the sum of derivatives.\n\n```\nf=(x+y) -> x'+y'\n```\n\n## Power Rule\n\n```\nx^n = nx^(n-1)\n```\n\n## Examples\n\nThe derivative of `f` with respect to `x`.\n\n```\n f(x) = 2x      + 3y^2\nf'(x) = 2*x'(x) + 3*x'(y^2)\n      = 1*2*1^0 + 2*3*0^1\n      = 2 + 0\n      = 2\n```\n\nThe derivative of `f` with respect to `x`.\n\n```\nf(x,y) = 3x^3      - y^2     + 5x      + 2\n f'(x) = 3*x'(x^3) - x'(y^2) + 5*x'(x) + 2\n       = 3*3*x^2   - 2*0^1   + 5*1     + 0\n       = 9^2       - 0       + 5       + 0\n       = 9^2\n```\n\nThe derivative of `f` with respect to `y`.\n\n```\nf(x,y) = 3x^3      - y^2     + 5x      + 2\n f'(y) = 3*y'(x^3) - y'(y^2) + 5*y'(x) + 0\n       = 3*3x^2    - 2y      + 0       + 0\n       = 3*3*0^2   - 2y      + 0       + 0\n       = 0         - 2y      + 0       + 0\n       = -2y\n```\n\nWhen deriving `f(x,y)` with respect to `x` then y is a constant and moved out of the derivative. \\\nThis leaves `x'(x)` meaning the derivative of `x` with respect to `x` which is 1.\n\n```\nf(x,y) = x*y\n\n f'(x) = y * x'(x)\n       = y * 1\n       = y\n\n f'(y) = x * y'(y)\n       = x * 1\n       = x\n```\n\nThe derivative of `f` with respect to `z` and `y` afterwards.\n\n```\nf(x,y,z) = 3x^3z        - y^2     + 5z      + 2yz\n\n   f'(z) = 3x^3 * z'(z) - 0       + 5*z'(z) + 2y * z'(z)\n         = 3x^3 * 1     - 0       + 5*1     + 2y * 1\n         = 3x^3                   + 5*1     + 2y\n\n   f'(y) = 0            - y'(y^2) + 0       + 2z*y'(y)\n         =              - 2y                + 2z\n\n   f'(x) = 3z*x'(x^3)   - x'(y^2) + 5*x'(z) + 0\n         = 3z*3x^2      - 0       + 5*0     + 0\n         = 3z*3x^2\n         = 3z*3x^2\n         = 9zx^2\n```\n\nWhen deriving with respect to `z`, then `x` and `y` are constants and moved out of the derivative. Also, the constant rule states that they derive to 0. \\\nWhen deriving with respect to `y` then `3x^3z` derives to `3*y'(x^3z) = 0` as `z` and `x` are constants and are independent of `y`. \\\nWhen deriving with respect to `x` then `z` is kept because it affects `x`. Therefore `f'(x) = 3x^3z = 3z*x'(x^3) = 3z*3x^2`.\n\n\n## Chain Rule:\n\n`f(g(x)) = f'(g(x)) * g'(x)`\n\n```\n3*x'((2x^2))^5 * 2*x'(x^2)\n3*5*(2x^2)^4   * 2*2*x\n15*(2x^2)^4 * 4x\n```\n\ndistribute the exponent of 4:\n```\n15*(2^(1*4)*x^(2*4)) * 4x\n15*2^4*x^8           * 4x\n```\n\ncombine the `x`es:\n```\n15*2^4*4*x^9\n```\n\ncombine the constants:\n```\n15*2^4*4*x^9\n960*x^9\n```\n\nChaining goes on forever:\n\n```\n`f(h(y,g(x))) = f'(g(x)) * h'(y, g(x)) * g'(x)`\n```\n\n## Gradient\n\nA partial derivative is one derivative of a multivariate function. That is a function taking multiple parameters. The vector of all the partial derivatives of a function is called the gradient.\n\nThe Neural Network can be understood as a huge function of arithmetic operations with weights and biases as paramters. \\\nDifferentiation helps getting to know how the weights and biases need to change to reduce loss.\n\nLoss is the mountains, differentiation and gradient descent is the mechanism to descent the mountains into the global minimum which is the points of least loss.\n\n# Lingo\n\n## Perceptron\n\nA perceptron is an algorithm for supervised learning of binary classifiers.\n\nMoney quote: \"The Neural Networks work the same way as the perceptron.\"<sup>2</sup>\n\na. Inputs are multiplied with their weights called. \\\nb. *Add* all multiplied values and call them *Weighted Sum*. \\\nc. Apply the *Weighted Sum* to the correct *Activation Function*.\n\n*Neural network without hidden layers.*\n\n## Automatic Differentiation\n\n[A practical application: Gradient Descent](https://medium.com/@rhome/automatic-differentiation-26d5a993692b#d4e5)\n\n## Over-fitting\n\nThe NN has memorized correct results rather than trained for it.\n\nCan be observed when training accuracy is greater than test accuracy.\n\n## Vanishing gradient problem\n\nWhen during backpropagation the weights get so vanishingly small that the gradient descent cannot operate anymore. The connection to the neuron kind of dies and cannot be leveraged anymore because the mathematical operations on the value of the weight are so small.\n\nThe opposite of this is **exploding gradient problem**.\n\n## Architectures\n\n- ResNet\n- EfficientNet\n- AlexNet\n- VGG\n- SqueezeNet\n- DenseNet\n- Inception\n\n### Convolutional Neural Network\n\n- shared weights\n- convolutions are filters on images\n- feature maps\n- pooling layers\n - extracting the important features from the feature map\n\n## Tensor\n\nData container, n-dimensional array. Not multidimensional -- n-dimensional! A scalar is therefore a 0-dimensional tensor.\n\nScalar is of rank 0. That's number of axes. Matrices are of rank 2\n\nThat's the theory. Practically tensors are referred to as tensors when they are n>=3 dimensional matrices.\n\nType | Array | Dimensions\n--- | --- | ---\nScalar | 1 | 0\nVector | [1,2,...] | 1\nMatrix | [[1,2,3,...],[1,2,3,...],...] | 2\nTensor | [[[1,2,3...], [1,2,3...]], [[1,2,3...], [1,2,3...]]] | n\n\nTensor of rank 3:\n\n```\n[[[  1,   4,   7]\n  [  2,   5,   8]\n  [  3,   6,   9]]\n [[ 10,  40,  70]\n  [ 20,  50,  80]\n  [ 30,  60,  90]]\n [[100, 400, 700]\n  [200, 500, 800]\n  [300, 600, 900]]]\n```\n\n[Source](https://towardsdatascience.com/quick-ml-concepts-tensors-eb1330d7760f)\n\n## Standardization and Normalization in PyTorch\n\n**Normalization** is a matter of range most popularly by squashing all values of any range to a range of 0 to 1.\n**Standardization** is a matter of making the data's mean equal 0 and its standard deviation equal 1.\n\nGiven the mean and std to PyTorch's `Normalize(mean, std)` will calculate the z-score used for standardization. \\\nZ-score formula:\n\n```\nZ = (x - m) / s\n```\n\n`x` = input \\\n`m` = mean of x \\\n`s` = standard deviation\n\nPyTorch's `ToTensor()` transform shifts ranges of images from 0-255 to 0-1 floats.\n\nFor a tensor `x` of PyTorch typical format NxCxHxW you'd obtain std and mean like this:\n\n```\nstd, mean = torch.std_mean(x, (0,2,3))\n```\n\nIf C is the last dimension the dims would be `0,1,2`.\n\nThese can be passed to PyTorch to do standardization:\n\n```\nNormalize(std=std, mean=mean)\n```\n\nTo unnormalize (i.e.) show the original image, the formula is:\n\n```\nmean, std = traind.transform.transforms[-1].mean, traind.transform.transforms[-1].std\nNormalize(mean=(-mean / std), std=(1.0 / std))\n```\n\n## Optimizer\n\nAlgorithms to optimize the NN such as amending weights to reduce the loss. Gradient descent is used by most of them.\n\n## Neural Network Topologies\n\nWhat kind of NNs are there.\n\n### Perceptron (P)\n\nSingle-layer NN. Input and output layer.<sup>1</sup> \\\nCalculation of weighted input then an activiation function (usually Sigmoid).\n\nThis is called a Perceptron model. A recurring term.\n\n**Applications**: Classification, Encode Database, Monitor Access Data. The latter two being Multilayer Perceptron.\n\nMultilayer perceptrons are a feed forward NN.\n\n### Feed Forward (FF)\n\n* Nodes never form a cycle.\n* Fully connected.\n\n> Therefore, all the nodes are fully connected. Something else to notice is that there is no visible or invisible connection between the nodes in the same layer. There are no back-loops in the feed-forward network. Hence, to minimize the error in prediction, we generally use the backpropagation algorithm to update the weight values.\n\n**Applications**: Data Compression, Pattern Recognition, Computer Vision, Sonar Target Recognition, Speech Recognition, Handwritten Characters Recognition.\n\n### Deep Convolutional Network (DCN)\n\n* Classifications of images, clustering of images and object recognition\n* Unsupervised construction of hierarchical image representations\n\n**Application**: Identify Faces, Street Signs, Tumors, Image Recognition, Video Analysis, NLP, Anomaly Detection, Drug Discovery, Checkers Game, Time Series Forecasting.\n\n### Other\n\nMany more NNs at https://medium.com/towards-artificial-intelligence/main-types-of-neural-networks-and-its-applications-tutorial-734480d7ec8e\n\n# TODO\n\n- Neural Network from Scratch\n- Implement Decision Tree\n- Implement Random Forest\n- Do NLP and Image Processing with a NN\n- Play with different NN architectures\n- Statistics\n- Probability theory\n- C, C++\n- Data Pipelines\n\n# Sources\n\nhttps://medium.com/towards-artificial-intelligence/building-neural-networks-from-scratch-with-python-code-and-math-in-detail-i-536fae5d7bbf\n\n<sup>1</sup>I think the input layer isn't counted, therefore two layers but a single-layer NN. \\\n<sup>2</sup>https://towardsdatascience.com/what-the-hell-is-perceptron-626217814f53 \\\n\n# See also\n\n- [NN Concept Animations](https://nnfs.io/neural_network_animations) \\\n- [Rules-of-thumb for building a Neural Network](https://towardsdatascience.com/17-rules-of-thumb-for-building-a-neural-network-93356f9930af) \\\n- [Tic Tac Toe supervised Machine Learning](https://github.com/Mathspy/tic-tac-toe-NN) \\\n- [A Guide to transitioning from software Developer/Engineer to Machine Learning Engineer](https://towardsdatascience.com/a-guide-to-transitioning-from-software-developer-engineer-to-machine-learning-engineer-49c8395dd63a) (Also the linked Stanford lectures in there) \\\n- [geohot/tinygrad NN from scratch reference implementation](https://github.com/geohot/tinygrad) \\\n- [NN from Scratch in Python](https://github.com/Sentdex/NNfSiX/tree/master/Python)\n\n" } }, { "id": "R_kgDOGhTt5Q", "name": "waai", "description": "Worms Armageddon AI Research", "url": "https://github.com/Zemke/waai", "homepageUrl": "https://waai.zemke.io", "object": {"text": "# [WAAI](https://waai.zemke.io)\n\n## Faster R-CNN Object Recognition\n\n![Object Recognition Bounding Boxes](https://raw.githubusercontent.com/Zemke/waai/main/internet/img/recog.png)\n\n [Documentation](https://waai.zemke.io/object-recognition) • [Video](https://www.youtube.com/watch?v=3sq1OArzWF8)"} } ] } } };

  createWorkSection(response.pinnedRepos.pinnedItems.nodes);
  createSpecsSection(response.lastPushedRepos.repositories.edges);
});

function createSpecsSection(repos) {
  const data = repos
    .flatMap(repo => repo.node.languages.edges)
    .reduce((acc, curr) => {
      const existing = acc.find(elem => elem.node.id === curr.node.id);
      if (!!existing) {
        existing.size += curr.size;
      } else {
        acc.push(curr);
      }
      return acc;
    }, [])
    .filter(({size}) => size >= 8000)
    .sort((a, b) => b.size - a.size)
    .map(elem => ({
      language: elem.node,
      size: elem.size,
      repos: repos
        .filter(repo => !!repo.node.languages.edges
          .find(lang => lang.node.id === elem.node.id))
        .map(({node}) => ({name: node.name, url: node.url}))
    }), []);
  document.getElementById('specsContainer').append(...data
    .map(elem => {
      const div = document.createElement('div');
      const h3 = document.createElement('h3');
      h3.textContent = elem.language.name;
      div.appendChild(h3);
      const repoLinkElements = elem.repos.flatMap((repo, idx, arr) => {
        const a = document.createElement('a');
        a.href = repo.url;
        a.target = '_blank';
        a.textContent = repo.name;
        if (idx + 1 !== arr.length) {
          return [a, document.createTextNode(', ')]
        }
        return a;
      });
      const repoLinkContainer = document.createElement('div');
      repoLinkContainer.classList.add('linkContainer');
      repoLinkContainer.append(...repoLinkElements);
      div.appendChild(repoLinkContainer);
      div.style.borderLeftColor = elem.language.color;
      return div;
    }));
}

function createWorkSection(pinnedRepos) {
  const nameAssoc = { // github repo name to localization
    'cwt': 'Crespo’s Worms Tournament',
    'instant-smart-quotes': "Instant Smart Quotes",
    'tippspiel2': "Tippspiel 2",
    'just': "Just",
    'starter-laravel-angular': 'Starter Laravel Angular',
    'starter-node-angular': "Starter Node Angular",
    'waaas': "WAaaS",
    'zemke.github.io': "Zemke.IO",
    'ml': "Machine Learning",
    'waai': "WAAI",
  };

  const imgAssoc = { // github repo id to background image
    'MDEwOlJlcG9zaXRvcnk3ODU0OTQw': '/images/cwt.png',
    'MDEwOlJlcG9zaXRvcnk2NDE2NjQ5Mw==': "/images/ism.jpg",
    'MDEwOlJlcG9zaXRvcnkxMTY0OTA5NjA=': "/images/tippspiel.png",
    'MDEwOlJlcG9zaXRvcnkyMzA1MzY5MzI=': "/images/just.png",
    'R_kgDOGhTt5Q': "/images/waai.png",
    'MDEwOlJlcG9zaXRvcnkyNjg4OTc0NTE=': "/images/ml.png",
  };

  const fallbackImages = ['/images/opensource.jpg', '/images/job.png'];
  let lastFallbackImageIdx = 1;

  function createWorkElement(res) {
    const div = document.createElement('div');
    let img;
    if (imgAssoc[res.id]) {
      img = imgAssoc[res.id];
    } else {
      lastFallbackImageIdx = lastFallbackImageIdx === 1 ? 0 : 1;
      img = fallbackImages[lastFallbackImageIdx];
    }
    // RGB is SCSS $main (#393D3F)
    div.style.backgroundImage = `radial-gradient(rgba(57, 61, 63, .4), rgba(57, 61, 63, .9)), url("${img}")`;
    div.classList.add('work');
    const h3 = document.createElement('h3');
    h3.innerText = nameAssoc[res.name] || res.name;
    div.appendChild(h3);
    return div;
  }

  function closeWorkOverlay(overlayDiv) {
    overlayDiv.remove();
    window.history.pushState(null, null, "/");
  }

  function createWorkOverlay(res) {
    const overlayDiv = document.createElement('div');
    overlayDiv.classList.add('work-description', 'on');
    const textDiv = document.createElement('div');
    textDiv.classList.add('text');
    const closeButtonElement = document.createElement('i');
    closeButtonElement.classList.add('fa', 'fa-5x', 'fa-times');
    closeButtonElement.addEventListener('click', () => closeWorkOverlay(overlayDiv));
    document.addEventListener('click', e =>
      e.target.classList.contains('work-description') && e.target.classList.contains('on') && closeWorkOverlay(overlayDiv));
    document.addEventListener('keydown', e => e.key === 'Escape' && closeWorkOverlay(overlayDiv));
    overlayDiv.appendChild(textDiv);
    textDiv.innerHTML = markyMarkdown(res.object.text, {highlightSyntax: false});
    textDiv.querySelectorAll('a > svg.octicon.octicon-link').forEach(elem => elem.remove());
    const shortDescription = document.createElement('div');
    shortDescription.classList.add('shortDescription');
    shortDescription.textContent = res.description;
    const externalLinks = document.createElement('div');
    externalLinks.classList.add('externalLinks');
    let linkListHtml = `<a target="_blank" href="${res.url}">View on GitHub</a>`;
    if (!!res.homepageUrl) {
      linkListHtml += `&nbsp;&bull;&nbsp;<a target="_blank" href="${res.homepageUrl}">View in Production</a>`
    }
    externalLinks.innerHTML = linkListHtml;
    textDiv.prepend(externalLinks);
    textDiv.prepend(shortDescription);
    textDiv.prepend(closeButtonElement);
    return overlayDiv;
  }

  const elements = pinnedRepos.map(res => {
    const workDiv = createWorkElement(res);
    if (res.object && res.object.text) {
      workDiv.addEventListener('click', () => {
        window.history.pushState(null, null, `?work=${res.name}#works`);
        workDiv.after(createWorkOverlay(res))
      });
    }
    return workDiv;
  });

  document.getElementById('worksContainer').append(...elements);

  const searchedWorkOverlay = new URLSearchParams(window.location.search).get('work');
  if (new URLSearchParams(window.location.search).get('work')) {
    document.getElementById('worksContainer').append(
      createWorkOverlay(pinnedRepos.find(res => res.name === searchedWorkOverlay)));
  }
}
